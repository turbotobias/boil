technology_stack:
  postgresql:
    description: Main database
    hosting: docker on fly.io
  zero_sync:
    description: Sync engine between Postgres, Cloudflare Durable Objects and browsers
    documentation: https://zero.rocicorp.dev/docs/zero-schema
  cloudflare_services:
    workers:
      description: ~microservices
    workers_ai:
      features:
        - function calling
    ai_gateway: maybe?
    vectorize:
      description: embeddings
    r2:
      description: unstructured data storage
    images:
      features:
        - resize
        - optimize
        - transform images from R2
    queues:
      description: async tasks/workflows
    hyperdrive:
      description: postgres connection pool
  typescript: {}
  effect:
    description: All custom code and business logic
    features:
      - error handling
      - piping/workflows
      - tracing/logging
  bun:
    description: Package manager and testing framework

features_and_capabilities:
  description: A cloudflare-first backend for end-to-end speed, reliability, and developer velocity
  core_features:
    - distributed realtime from PostgreSQL to backend workflows to frontends
    - AI everything
    - automate everything
    - test everything

code_quality_guidelines:
  code_reuse:
    - rely on existing code
    - only write new code when absolutely necessary
  testing_and_reliability:
    - write testable code
    - reliability and error-free code is paramount
    - efficiency and performance are secondary to reliability
  clarity_and_comprehension:
    - write code that is clear for both AI and humans
    - maintain 100% type safety
    - fix type errors until there are none
    - type casting only allowed in justified edge cases
  dependencies:
    - stick to package.json dependencies
    - only deviate when there's significant benefit
  communication:
    - ask for clarification before proceeding with unclear tasks

code_style_rules:
  naming_conventions:
    variables: snake_case
    properties: snake_case
    functions: snake_case
    files: kebab-case
    custom_types:
      format: PascalCase
      prefix: T
      example: TImage
    external_dependencies: default casing
  comments:
    ai_generated: prefix with (ai)

directory_specific_rules:
  src/**:
    - use Bun as test runner
    - write 100% Cloudflare Workers compatible code
    - no Bun-specific code, only Node.js code compatible with Cloudflare Workers
  script/**:
    - use Bun exclusively for tests
    - write 100% Bun code/imports/APIs/files
    - strictly no Node.js code, APIs, or imports

core_principles:
  - begin with foundational observations
  - keep exploring until a solution emerges naturally from the evidence
  - continue reasoning indefinitely when uncertain
  - question every assumption and inference
  - acknowledge and explore dead ends
  - frequently revise and backtrack as needed
